## user.py - Class Definition for ActiveUser, the main class that handles user profiles and interactions
## Author  - Vincent Fiestada

## Import built-in time module for age and bday handling

from time import localtime
from friendship import *
from conversation import *
from status import *
from Tkinter import PhotoImage

class ActiveUser:
	## Keeps track of all used usernames to prevent duplication:
	usedNames = []
	## Keeps track of logged in / active users' IDs:
	activeUsers = []
	
	## username and password are required parameters;
	## bday(optional) must be passed as a dictionary 
	## with items year, month, and day
	## gender should be either 'M' or 'F', or 'U' if unspecified
	def __init__(self, uid, username, password, gender = None, bday = None, jobs = None, edu = None):
		self.userID = uid
		if username not in ActiveUser.usedNames:
			self.username = username
		else:
			self.username = "User" + str(self.userID)
		## Add username to list of used usernames:
		ActiveUser.usedNames.append(self.username)
		self.password = password
		self.profilePic = None ## to be generated later
		self.friends = list() ## a list of Friendship objects
		self.conversations = list() ## a list of Conversation objects
		self.notifications = None
		self.statuses = list() ## a list of Status objects
		self.newsfeed = NewsFeed(list()) ## a newsfeed object that must be generated by a ControlCenter
		self.gender = gender
		self.age = None
		self.bday = bday
		self.jobHistory = jobs
		self.educationHistory = edu
	
	def getUserID(self):
		return self.userID

	def getUsername(self):
		return self.username

	def setUsername(self, newusername):
		if newusername in ActiveUser.usedNames:
			return "Username already in use."
		ActiveUser.usedNames.remove(self.username)
		self.username = newusername
		ActiveUser.usedNames.append(newusername)
		return "SUCCESS"

	def getPassword(self):
		return self.password

	def setPassword(self, newpass):
		self.password = newpass

	def getProfilePic(self):
		if self.profilePic != None:
			return self.profilePic
		self.profilePicfilename = "users/" + self.username + "/profile.gif"
		try:
			self.profilePic = PhotoImage(file = self.profilePicfilename)
		except:
			self.profilePic = PhotoImage(file = "img/defaultpic.gif")
		return self.profilePic

	def resetProfilePic(self):
		del self.profilePic
		self.profilePic = None

	def getGender(self):
		if self.gender == 'M':
			return "Male"
		elif self.gender == 'F':
			return "Female"
		else:
			return "Unspecified"

	## 'newgender' argument must be 'M' or 'F', other gender will be returned as "Unspecified" in future
	def setGender(self, newgender):
		self.gender = newgender

	def getAge(self):
		## Assumes that the program won't be running longer than a day. Because why would you?
		if self.age != None:
			return self.age
		if self.bday != None:
			currentDate = localtime()
			significantYears = self.bday['year']
			
			if self.bday['month'] > currentDate.tm_mon:
				## Adjust for bdays ahead of current month
				significantYears += 1
			elif self.bday['day'] > currentDate.tm_mday:
				## Adjust for bdays ahead of current month day
				significantYears += 1
			
			## Subtract bday year from current year
			self.age = currentDate.tm_year - significantYears
			return self.age
		else:
			return 0

	def getBday(self):
		if self.bday != None:
			months = ("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
			return months[self.bday['month']-1] + " " + str(self.bday['day']) + ", " + str(self.bday['year'])
		else: 
			return "Unspecified"

	def getBdayDict(self):
		return self.bday

	def setBday(self, newbday):
		## newbday must be a dictionary with entries year, month, and day
		self.bday = newbday

	def getJobHistory(self):
		return self.jobHistory

	def setJobHistory(self, joblist):
		self.jobHistory = joblist

	def getEducationHistory(self):
		return self.educationHistory

	def setEducationHistory(self, edulist):
		self.educationHistory = edulist

	def getFriends(self):
		return self.friends

	def addFriendship(self, friendship):
		self.friends.append(friendship)

	def setFriends(self, newfriendlist):
		self.friends = newfriendlist

	def unfriendById(self, uid):
		for f in self.friends:
			if f.getFriendID() == uid:
				self.friends.remove(f)
				break

	def getConversations(self):
		return self.conversations

	def addConversation(self, conversation):
		if conversation not in self.conversations:
			self.conversations.append(conversation)
			conversation.join(self.userID)

	def setConversations(self, newconversationslist):
		self.conversations = newconversationslist
	
	## 'conversationtoexit' argument must be a Conversation Object already in the list of conversations this user has
	def exitConversation(self, conversationtoexit):
		if conversationtoexit not in self.conversations:
			return
		## delete this user's messages in conversation
		##messages = list(x for x in conversationtoexit.getMessages() if x.getSender() == self.userID)
		##for x in messages:
		##	conversationtoexit.deleteMessageByValue(x)

		## disjoin conversation
		conversationtoexit.disjoin(self.userID)
		self.conversations.remove(conversationtoexit)

	def getStatuses(self):
		return self.statuses
	
	def getNewsfeed(self):
		return self.newsfeed

	## 'todelete' argument must be a Status object that is included in self.statuses
	def deleteStatusByValue(self, todelete):
		self.statuses.remove(todelete)
	
	# 'status' must be a Status Object
	def addStatus(self, status):
		self.statuses.append(status)

	## 'newsfeed' must be a list of status objects
	def setNewsfeed(self, newsfeed):
		self.newsfeed.setStatuses(newsfeed)

	def setStatuses(self, statuslist):
		self.statuses = statuslist

	def logout(self):
		if self.userID not in ActiveUser.activeUsers:
			return
		ActiveUser.activeUsers.remove(self.userID)